"""
slack_notification.py
---------------------
Slack notification system using webhooks
- Sends messages to Slack channels
- Supports rich message formatting
- Secure credential management via environment variables
"""

import os
import requests
import json
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


def send_slack_notification(message=None, blocks=None, webhook_url=None):
    """
    Send a notification to Slack using a webhook.
    
    Args:
        message (str, optional): Simple text message to send
        blocks (list, optional): Rich formatted blocks for advanced layouts
        webhook_url (str, optional): Slack webhook URL. If not provided, uses .env
    
    Returns:
        bool: True if message sent successfully, False otherwise
    """
    try:
        # Get webhook URL from parameter or environment variable
        url = webhook_url or os.getenv("SLACK_WEBHOOK_URL")
        
        if not url:
            raise ValueError("Slack webhook URL not provided. Set SLACK_WEBHOOK_URL in .env file")
        
        # Build payload
        payload = {}
        
        if blocks:
            # Rich formatted message with blocks
            payload["blocks"] = blocks
            # Add fallback text
            payload["text"] = message or "New notification from GDPR Compliance Checker"
        elif message:
            # Simple text message
            payload["text"] = message
        else:
            raise ValueError("Either 'message' or 'blocks' must be provided")
        
        # Send POST request to Slack webhook
        response = requests.post(
            url,
            data=json.dumps(payload),
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        # Check response
        if response.status_code == 200:
            print("✓ Slack notification sent successfully!")
            return True
        else:
            print(f"✗ Failed to send Slack notification. Status: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"✗ Error sending Slack notification: {str(e)}")
        return False


def send_compliance_report(report_data):
    """
    Send a formatted compliance report to Slack.
    
    Args:
        report_data (dict): Dictionary containing report information
            - document_type: Type of document analyzed
            - risk_score: Risk score (0-100)
            - missing_clauses: Number of missing clauses
            - timestamp: When analysis was performed
    
    Returns:
        bool: True if sent successfully, False otherwise
    """
    risk_score = report_data.get("risk_score", 0)
    
    # Determine risk level and emoji
    if risk_score <= 25:
        risk_level = "Low Risk"
        risk_emoji = "✅"
        color = "#36a64f"  # Green
    elif risk_score <= 50:
        risk_level = "Medium Risk"
        risk_emoji = "⚠️"
        color = "#ff9900"  # Orange
    elif risk_score <= 75:
        risk_level = "High Risk"
        risk_emoji = "🔶"
        color = "#ff6600"  # Dark orange
    else:
        risk_level = "Critical Risk"
        risk_emoji = "🔴"
        color = "#ff0000"  # Red
    
    # Build rich message blocks
    blocks = [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": "📋 GDPR Compliance Report",
                "emoji": True
            }
        },
        {
            "type": "section",
            "fields": [
                {
                    "type": "mrkdwn",
                    "text": f"*Document Type:*\n{report_data.get('document_type', 'Unknown')}"
                },
                {
                    "type": "mrkdwn",
                    "text": f"*Risk Score:*\n{risk_emoji} {risk_score}/100 ({risk_level})"
                }
            ]
        },
        {
            "type": "section",
            "fields": [
                {
                    "type": "mrkdwn",
                    "text": f"*Missing Clauses:*\n{report_data.get('missing_clauses', 0)}"
                },
                {
                    "type": "mrkdwn",
                    "text": f"*Analyzed At:*\n{report_data.get('timestamp', 'N/A')}"
                }
            ]
        },
        {
            "type": "divider"
        },
        {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": "🤖 Generated by GDPR Compliance Checker"
                }
            ]
        }
    ]
    
    return send_slack_notification(
        message=f"Compliance Report: {report_data.get('document_type')} - Risk Score: {risk_score}",
        blocks=blocks
    )


def send_template_update_notification(changes, errors):
    """
    Send notification about template updates to Slack.
    
    Args:
        changes (list): List of template changes detected
        errors (list): List of errors encountered
    
    Returns:
        bool: True if sent successfully, False otherwise
    """
    # Determine color based on errors
    color = "#ff9900" if errors else "#36a64f"
    
    # Build message sections
    blocks = [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": "🔄 GDPR Template Update",
                "emoji": True
            }
        }
    ]
    
    # Add changes section
    if changes:
        changes_text = "\n".join([f"• {change}" for change in changes])
        blocks.append({
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*📝 Changes Detected:*\n{changes_text}"
            }
        })
    
    # Add errors section
    if errors:
        errors_text = "\n".join([f"• {error}" for error in errors])
        blocks.append({
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*⚠️ Errors Encountered:*\n{errors_text}"
            }
        })
    
    # Add footer
    blocks.extend([
        {
            "type": "divider"
        },
        {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": "🤖 Automated notification from GDPR Compliance Checker"
                }
            ]
        }
    ])
    
    fallback_message = f"Template Update: {len(changes)} changes detected"
    if errors:
        fallback_message += f", {len(errors)} errors"
    
    return send_slack_notification(message=fallback_message, blocks=blocks)


def send_simple_message(text):
    """
    Send a simple text message to Slack.
    
    Args:
        text (str): Message text to send
    
    Returns:
        bool: True if sent successfully, False otherwise
    """
    return send_slack_notification(message=text)


def send_compliance_failure_alert(report_data):
    """
    Send detailed alert about compliance failures to Slack.
    
    Args:
        report_data (dict): Dictionary containing compliance analysis results
            - document_type: Type of document analyzed
            - risk_score: Risk score (0-100)
            - missing_clauses: List or text of missing clauses
            - compliance_risks: List or text of compliance risks
            - recommendations: List or text of recommendations
            - timestamp: When analysis was performed (optional)
    
    Returns:
        bool: True if sent successfully, False otherwise
    """
    try:
        # Extract data
        document_type = report_data.get("document_type", "Unknown Document")
        risk_score = report_data.get("risk_score", 0)
        missing_clauses = report_data.get("missing_clauses", [])
        compliance_risks = report_data.get("compliance_risks", [])
        recommendations = report_data.get("recommendations", [])
        timestamp = report_data.get("timestamp", "Not specified")
        
        # Determine risk level and emoji
        if risk_score <= 25:
            risk_level = "Low Risk"
            risk_emoji = "✅"
            color = "#36a64f"  # Green
        elif risk_score <= 50:
            risk_level = "Medium Risk"
            risk_emoji = "⚠️"
            color = "#ff9900"  # Orange
        elif risk_score <= 75:
            risk_level = "High Risk"
            risk_emoji = "🔶"
            color = "#ff6600"  # Dark orange
        else:
            risk_level = "Critical Risk"
            risk_emoji = "🔴"
            color = "#ff0000"  # Red
        
        # Format missing clauses
        if isinstance(missing_clauses, list) and missing_clauses:
            missing_clauses_text = "\n".join([f"• {clause}" for clause in missing_clauses[:5]])  # Limit to 5
            if len(missing_clauses) > 5:
                missing_clauses_text += f"\n• ... and {len(missing_clauses) - 5} more"
        elif missing_clauses:
            missing_clauses_text = str(missing_clauses)[:500]  # Limit text length
        else:
            missing_clauses_text = "None detected"
        
        # Format compliance risks
        if isinstance(compliance_risks, list) and compliance_risks:
            risks_text = "\n".join([f"• {risk}" for risk in compliance_risks[:5]])
            if len(compliance_risks) > 5:
                risks_text += f"\n• ... and {len(compliance_risks) - 5} more"
        elif compliance_risks:
            risks_text = str(compliance_risks)[:500]
        else:
            risks_text = "None detected"
        
        # Format recommendations
        if isinstance(recommendations, list) and recommendations:
            recommendations_text = "\n".join([f"• {rec}" for rec in recommendations[:3]])
            if len(recommendations) > 3:
                recommendations_text += f"\n• ... and {len(recommendations) - 3} more"
        elif recommendations:
            recommendations_text = str(recommendations)[:500]
        else:
            recommendations_text = "No recommendations available"
        
        # Build rich message blocks
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "⚠️ GDPR Compliance Alert",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*Document Type:* {document_type}\n*Analysis Date:* {timestamp}"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*Risk Score:*\n{risk_emoji} {risk_score}/100"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Risk Level:*\n{risk_level}"
                    }
                ]
            },
            {
                "type": "divider"
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*❌ Missing Clauses:*\n{missing_clauses_text}"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*🚨 Compliance Risks:*\n{risks_text}"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*✅ Recommendations:*\n{recommendations_text}"
                }
            },
            {
                "type": "divider"
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": "🤖 Automated alert from GDPR Compliance Checker - Please review and take action"
                    }
                ]
            }
        ]
        
        fallback_message = f"GDPR Compliance Alert: {document_type} - Risk Score {risk_score}/100 ({risk_level})"
        
        return send_slack_notification(message=fallback_message, blocks=blocks)
        
    except Exception as e:
        print(f"Error sending compliance failure alert to Slack: {str(e)}")
        return False


if __name__ == "__main__":
    # Test the Slack notification
    print("\n" + "="*60)
    print("Testing Slack Notification")
    print("="*60 + "\n")
    
    # Test 1: Simple message
    print("Test 1: Sending simple message...")
    send_simple_message("Hello! This is a test message from GDPR Compliance Checker 🚀")
    
    print("\n" + "-"*60 + "\n")
    
    # Test 2: Compliance report
    print("Test 2: Sending compliance report...")
    sample_report = {
        "document_type": "Data Processing Agreement",
        "risk_score": 45,
        "missing_clauses": 3,
        "timestamp": "2025-10-23 12:00:00"
    }
    send_compliance_report(sample_report)
    
    print("\n" + "-"*60 + "\n")
    
    # Test 3: Template update notification
    print("Test 3: Sending template update notification...")
    sample_changes = [
        "Data Processing Agreement: Template updated",
        "Standard Contractual Clauses: New template created"
    ]
    sample_errors = ["Failed to download Joint Controller Agreement"]
    send_template_update_notification(sample_changes, sample_errors)
    
    print("\n" + "="*60)
    print("Testing Complete!")
    print("="*60)
